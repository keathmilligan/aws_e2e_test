name: Deploy ECS API Task Definition and Service

on:
  workflow_call:
    inputs:
      ECSClusterName:
        required: true
        type: string
        description: The name of the ECS cluster where the service will be deployed.
      TargetGroupArn:
        required: true
        type: string
        description: The ARN of the target group for the ECS service.
      LogGroupArn:
        required: true
        type: string
        description: The ARN of the CloudWatch log group for the ECS task.
      VpcId:
        required: true
        type: string
        description: The ID of the VPC where the ECS service will be deployed.
      PublicSubnet1:
        required: true
        type: string
        description: The ID of the first public subnet in the VPC.
      PublicSubnet2:
        required: true
        type: string
        description: The ID of the second public subnet in the VPC.

jobs:
  deploy-api-repo:
    name: Deploy API ecr Repo
    runs-on: ubuntu-latest
    outputs:
      RepositoryUri: ${{ steps.deploy-ecr-stack.outputs.RepositoryUri }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: ./.github/actions/configure-aws-credentials
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Deploy ECR Stack
        id: deploy-ecr-stack
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ECRStack
          template: iac/ecr.yaml
          parameters: |
            Environment=${{ env.ENVIRONMENT }}
            RepositoryName=${{ env.API_REPOSITORY_NAME }}
          capabilities: CAPABILITY_NAMED_IAM
          no-fail-on-empty-changeset: "1"

  build-push-api-image:
    name: Build and Push API Image
    runs-on: ubuntu-latest
    needs: deploy-api-repo

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: ./.github/actions/configure-aws-credentials
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./api
          push: true
          tags: ${{ needs.deploy-api-repo.outputs.RepositoryUri }}:latest,${{ needs.deploy-api-repo.outputs.RepositoryUri }}:${{ github.sha }}

  deploy-api-task:
    name: Deploy API Task Definition
    runs-on: ubuntu-latest
    needs: build-push-api-image
    outputs:
      TaskDefinitionArn: ${{ steps.deploy-api-task.outputs.TaskDefinitionArn }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: ./.github/actions/configure-aws-credentials
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Deploy API Task Definition
        id: deploy-api-task
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: APITaskStack
          template: iac/ecs-task.yaml
          parameters: |
            Environment=${{ env.ENVIRONMENT }}
            EcrRepositoryUri=${{ needs.deploy-api-repo.outputs.RepositoryUri }}:${{ github.sha }}
          capabilities: CAPABILITY_NAMED_IAM
          no-fail-on-empty-changeset: "1"

  deploy-api-service:
    name: Deploy API Service Stack
    runs-on: ubuntu-latest
    needs: deploy-api-task
    outputs:
      ServiceName: ${{ steps.deploy-api-service.outputs.ServiceName }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: ./.github/actions/configure-aws-credentials
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Deploy API Service Stack
        id: deploy-api-service
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: APIServicestack
          template: iac/ecs-service.yaml
          parameters: |
            Environment=${{ env.ENVIRONMENT }}
            ECSClusterName=${{ inputs.ECSClusterName }}
            TargetGroupArn=${{ inputs.TargetGroupArn }}
            TaskDefinitionArn=${{ needs.deploy-api-task.outputs.TaskDefinitionArn }}
            LogGroupArn=${{ inputs.LogGroupArn }}
          capabilities: CAPABILITY_NAMED_IAM
          no-fail-on-empty-changeset: "1"
