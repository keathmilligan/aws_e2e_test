name: Deploy AWS End-to-End Application

on:
  workflow_dispatch:

jobs:
  # Deploy common infrastructure (VPC, ECS cluster, etc.)
  deploy-common-infrastructure:
    name: Deploy Common Infrastructure
    runs-on: ubuntu-latest
    outputs:
      LoggingKMSKeyArn: ${{ steps.deploy-log-kms-key.outputs.LoggingKMSKeyArn }}
      VpcId: ${{ steps.deploy-networking.outputs.VpcId }}
      PublicSubnet1: ${{ steps.deploy-networking.outputs.PublicSubnet1 }}
      PublicSubnet2: ${{ steps.deploy-networking.outputs.PublicSubnet2 }}
      PrivateSubnet1: ${{ steps.deploy-networking.outputs.PrivateSubnet1 }}
      PrivateSubnet2: ${{ steps.deploy-networking.outputs.PrivateSubnet2 }}
      ECSClusterName: ${{ steps.deploy-ecs.outputs.ClusterName }}
      TaskExecutionRoleArn: ${{ steps.deploy-ecs-task-execution-role.outputs.TaskExecutionRoleArn }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: ./.github/actions/configure-aws-credentials
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Deploy Logging Encryption Key
        id: deploy-log-kms-key
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ${{ env.APPLICATION_NAME }}-${{ env.ENVIRONMENT }}-LoggingEncryptionKeyStack
          template: iac/log-kms-key.yaml
          parameter-overrides: >-
            ApplicationName=${{ env.APPLICATION_NAME }},
            Environment=${{ env.ENVIRONMENT }}
          capabilities: CAPABILITY_NAMED_IAM
          no-fail-on-empty-changeset: "1"       

      - name: Deploy Networking
        id: deploy-networking
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ${{ env.APPLICATION_NAME }}-${{ env.ENVIRONMENT }}-NetworkStack
          template: iac/networking.yaml
          parameter-overrides: >-
            ApplicationName=${{ env.APPLICATION_NAME }},
            Environment=${{ env.ENVIRONMENT }}
          capabilities: CAPABILITY_NAMED_IAM
          no-fail-on-empty-changeset: "1"

      - name: Deploy ECS Stack
        id: deploy-ecs
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ${{ env.APPLICATION_NAME }}-${{ env.ENVIRONMENT }}-ECSStack
          template: iac/ecs.yaml
          parameter-overrides: >-
            ApplicationName=${{ env.APPLICATION_NAME }},
            Environment=${{ env.ENVIRONMENT }}
          capabilities: CAPABILITY_NAMED_IAM
          no-fail-on-empty-changeset: "1"

      - name: Deploy ECS Task Execution Role
        id: deploy-ecs-task-execution-role
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ${{ env.APPLICATION_NAME }}-${{ env.ENVIRONMENT }}-TaskExecutionRoleStack
          template: iac/task-execution-role.yaml
          parameter-overrides: >-
            ApplicationName=${{ env.APPLICATION_NAME }},
            Environment=${{ env.ENVIRONMENT }}
          capabilities: CAPABILITY_NAMED_IAM
          no-fail-on-empty-changeset: "1"

  # Deploy message service
  deploy-message-service:
    name: Deploy Message Service
    runs-on: ubuntu-latest
    needs: deploy-common-infrastructure
    env:
      SERVICE_NAME: msgsvc

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: ./.github/actions/configure-aws-credentials
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Deploy ECR Repo
        id: deploy-ecr-repo
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ${{ env.APPLICATION_NAME }}-${{ env.ENVIRONMENT }}-${{ env.SERVICE_NAME }}-ECRStack
          template: iac/ecr.yaml
          parameter-overrides: >-
            ApplicationName=${{ env.APPLICATION_NAME }},
            Environment=${{ env.ENVIRONMENT }},
            ServiceName=${{ env.SERVICE_NAME }}
          capabilities: CAPABILITY_NAMED_IAM
          no-fail-on-empty-changeset: "1"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./msgsvc
          push: true
          platforms: linux/amd64
          tags: |
            ${{ steps.deploy-ecr-repo.outputs.RepositoryUri }}:latest
            ${{ steps.deploy-ecr-repo.outputs.RepositoryUri }}:${{ github.sha }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.repository.updated_at }}

      - name: Generate Deployment Timestamp
        id: timestamp
        run: echo "deployment_timestamp=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Deploy ECS Service
        id: deploy-ecs-service
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ${{ env.APPLICATION_NAME }}-${{ env.ENVIRONMENT }}-${{ env.SERVICE_NAME }}-ECSServiceStack
          template: iac/msgsvc.yaml
          parameter-overrides: >-
            LoggingKMSKeyArn=${{ needs.deploy-common-infrastructure.outputs.LoggingKMSKeyArn }},
            ApplicationName=${{ env.APPLICATION_NAME }},
            Environment=${{ env.ENVIRONMENT }},
            ServiceName=${{ env.SERVICE_NAME }},
            EcrRepositoryUri=${{ steps.deploy-ecr-repo.outputs.RepositoryUri }}:${{ github.sha }},
            TaskExecutionRoleArn=${{ needs.deploy-common-infrastructure.outputs.TaskExecutionRoleArn }},
            VpcId=${{ needs.deploy-common-infrastructure.outputs.VpcId }},
            PublicSubnet1=${{ needs.deploy-common-infrastructure.outputs.PublicSubnet1 }},
            PublicSubnet2=${{ needs.deploy-common-infrastructure.outputs.PublicSubnet2 }},
            PrivateSubnet1=${{ needs.deploy-common-infrastructure.outputs.PrivateSubnet1 }},
            PrivateSubnet2=${{ needs.deploy-common-infrastructure.outputs.PrivateSubnet2 }},
            ECSClusterName=${{ needs.deploy-common-infrastructure.outputs.ECSClusterName }},
            CertificateArn=${{ vars.ACM_CERTIFICATE_ARN }},
            DeploymentTimestamp=${{ steps.timestamp.outputs.deployment_timestamp }}
          capabilities: CAPABILITY_NAMED_IAM
          no-fail-on-empty-changeset: "1"


  # Deploy other microservices...

  # Deploy frontend infrastructure (S3, CloudFront)
  deploy-frontend-infrastructure:
    name: Deploy Frontend Infrastructure
    runs-on: ubuntu-latest
    outputs:
      BucketName: ${{ steps.deploy-cloudfront-stack.outputs.BucketName }}
      CloudFrontDistributionId: ${{ steps.deploy-cloudfront-stack.outputs.CloudFrontDistributionId }}
    env:
      DISTRIBUTION_NAME: main

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: ./.github/actions/configure-aws-credentials
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Deploy CloudFront Stack
        id: deploy-cloudfront-stack
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ${{ env.APPLICATION_NAME }}-${{ env.ENVIRONMENT }}-CloudFrontStack
          template: iac/cloudfront.yaml
          parameter-overrides: >-
            ApplicationName=${{ env.APPLICATION_NAME }},
            Environment=${{ env.ENVIRONMENT }},
            DistributionName=${{ env.DISTRIBUTION_NAME }},
            DomainName=${{ env.DOMAIN_NAME }},
            CertificateArn=${{ vars.ACM_CERTIFICATE_ARN }}
          capabilities: CAPABILITY_NAMED_IAM
          no-fail-on-empty-changeset: "1"

  # Deploy frontend
  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: deploy-frontend-infrastructure

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: ./.github/actions/configure-aws-credentials
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Build frontend application
        run: |
          cd frontend
          npm install
          REACT_APP_API_URL=https://${{ env.API_DOMAIN_NAME }} npm run build

      - name: Deploy Frontend to S3
        uses: reggionick/s3-deploy@v4
        with:
          bucket: ${{ needs.deploy-frontend-infrastructure.outputs.BucketName }}
          bucket-region: ${{ env.AWS_REGION }}
          folder: 'frontend/build'
          delete-removed: true
          dist-id: ${{ needs.deploy-frontend-infrastructure.outputs.CloudFrontDistributionId }}
          private: true
          invalidation: /
