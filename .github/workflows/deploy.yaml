name: Deploy AWS End-to-End Example

on:
  workflow_dispatch:

env:
  ECR_REPOSITORY: ${{ github.event.repository.name }}-backend
  FRONTEND_BUCKET: ${{ github.event.repository.name }}-frontend
  STACK_NAME: aws_e2e_test

permissions:
  id-token: write
  contents: read

jobs:
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    outputs:
      ecr-repository-uri: ${{ steps.ecr-info.outputs.repository-uri }}
      frontend-bucket: ${{ steps.frontend-info.outputs.bucket-name }}
      api-endpoint: ${{ steps.api-info.outputs.endpoint }}
      cloudfront-distribution-id: ${{ steps.cloudfront-info.outputs.distribution-id }}
      ecs-cluster-name: ${{ steps.ecs-info.outputs.cluster-name }}
      ecs-service-name: ${{ steps.ecs-info.outputs.service-name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy CloudFormation stacks
        run: |
          aws cloudformation deploy \
            --template-file iac/main.yaml \
            --stack-name ${{ env.STACK_NAME }} \
            --parameter-overrides \
                Environment=${{ env.ENVIRONMENT }} \
                DomainName=${{ env.DOMAIN_NAME }} \
                CertificateArn=${{ secrets.ACM_CERTIFICATE_ARN }} \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND \
            --no-fail-on-empty-changeset

      - name: Get ECR repository URI
        id: ecr-info
        run: |
          REPOSITORY_URI=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }}-ECRStack \
            --query "Stacks[0].Outputs[?OutputKey=='RepositoryUri'].OutputValue" \
            --output text)
          echo "repository-uri=$REPOSITORY_URI" >> $GITHUB_OUTPUT

      - name: Get frontend bucket name
        id: frontend-info
        run: |
          BUCKET_NAME=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }}-FrontendStack \
            --query "Stacks[0].Outputs[?OutputKey=='BucketName'].OutputValue" \
            --output text)
          echo "bucket-name=$BUCKET_NAME" >> $GITHUB_OUTPUT

      - name: Get API endpoint
        id: api-info
        run: |
          API_ENDPOINT=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }}-ALBStack \
            --query "Stacks[0].Outputs[?OutputKey=='LoadBalancerDnsName'].OutputValue" \
            --output text)
          echo "endpoint=$API_ENDPOINT" >> $GITHUB_OUTPUT

      - name: Get CloudFront distribution ID
        id: cloudfront-info
        run: |
          DISTRIBUTION_ID=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }}-FrontendStack \
            --query "Stacks[0].Outputs[?OutputKey=='CloudFrontDistributionId'].OutputValue" \
            --output text)
          echo "distribution-id=$DISTRIBUTION_ID" >> $GITHUB_OUTPUT

      - name: Get ECS cluster and service names
        id: ecs-info
        run: |
          CLUSTER_NAME=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }}-ECSStack \
            --query "Stacks[0].Outputs[?OutputKey=='ClusterName'].OutputValue" \
            --output text)
          SERVICE_NAME=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }}-ECSStack \
            --query "Stacks[0].Outputs[?OutputKey=='ServiceName'].OutputValue" \
            --output text)
          echo "cluster-name=$CLUSTER_NAME" >> $GITHUB_OUTPUT
          echo "service-name=$SERVICE_NAME" >> $GITHUB_OUTPUT

  build-and-deploy-backend:
    name: Build and Deploy Backend
    runs-on: ubuntu-latest
    needs: deploy-infrastructure

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./api
          push: true
          tags: ${{ needs.deploy-infrastructure.outputs.ecr-repository-uri }}:latest,${{ needs.deploy-infrastructure.outputs.ecr-repository-uri }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Force new deployment
        run: |
          aws ecs update-service --force-new-deployment \
            --cluster ${{ needs.deploy-infrastructure.outputs.ecs-cluster-name }} \
            --service ${{ needs.deploy-infrastructure.outputs.ecs-service-name }}

  build-and-deploy-frontend:
    name: Build and Deploy Frontend
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, build-and-deploy-backend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: cd frontend && npm ci

      - name: Build frontend
        run: |
          cd frontend
          REACT_APP_API_URL=http://${{ needs.deploy-infrastructure.outputs.api-endpoint }} npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to S3
        run: |
          aws s3 sync frontend/build/ s3://${{ needs.deploy-infrastructure.outputs.frontend-bucket }}/ --delete

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ needs.deploy-infrastructure.outputs.cloudfront-distribution-id }} \
            --paths "/*"