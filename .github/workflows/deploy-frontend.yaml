name: Build and Deploy Frontend Application

on:
  workflow_call:
    inputs:
      LoadBalancerDnsName:
        required: true
        type: string
        description: The DNS name of the load balancer for the ECS service.
      BucketName:
        required: true
        type: string
        description: The name of the S3 bucket for the frontend application.
      CloudFrontDistributionId:
        required: true
        type: string
        description: The ID of the CloudFront distribution for the frontend application.

jobs:
  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: ./.github/actions/configure-aws-credentials
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Build frontend application
        run: |
          cd frontend
          npm install
          npm run build

      - name: Deploy Frontend to S3
        uses: aws-actions/amazon-s3-deployment@v1.0.0
        with:
          bucket: ${{ inputs.BucketName }}
          region: ${{ env.AWS_REGION }}
          source: 'frontend/dist'
          delete: true
          public-access: true

      - name: Invalidate CloudFront Cache
        uses: ./.github/actions/cloudfront-invalidate
        with:
          distribution-id: ${{ inputs.CloudFrontDistributionId }}
          paths: '/*'
          aws-region: ${{ env.AWS_REGION }}
