AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS End-to-End Deployment Example - ECS Task Stack'

Parameters:
  Environment:
    Type: String
    Default: dev
    Description: Environment name (dev, staging, prod)

  EcrRepositoryUri:
    Type: String
    Description: ECR Repository URI

  ContainerName:
    Type: String
    Default: awse2e-container
    Description: Name of the ECS container

  ContainerCpu:
    Type: String
    Default: 256
    Description: CPU units for the container (e.g., 256, 512, 1024)

  ContainerMemory:
    Type: String
    Default: 512
    Description: Memory in MiB for the container (e.g., 512, 1024, 2048)

  ContainerPort:
    Type: Number
    Default: 8080
    Description: Container port
  
  TaskFamily:
    Type: String
    Default: awse2e-task
    Description: ECS Task Family name
  
  SecurityGroupTag:
    Type: String
    Default: awse2e-ecs-sg
    Description: Tag for the ECS security group

  LogGroupName:
    Type: String
    Description: CloudWatch Log Group name

Resources:
  # ECS Task Execution Role - for pulling images and writing logs
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: !Sub "${Environment}-ecr-access-policy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Explicit permission for ECR authentication token for VPC endpoints
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                Resource: '*'
              # Explicit permission for pulling from ECR repository
              - Effect: Allow
                Action:
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'ecr:BatchCheckLayerAvailability'
                Resource: !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${Environment}-*"
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub "${Environment}-ecs-execution-role"
        - Key: Application
          Value: "awse2e"
        - Key: ManagedBy
          Value: "CloudFormation"
          
  # ECS Task Role - for application permissions
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      # Add only the permissions your application needs
      Policies:
        - PolicyName: !Sub "${Environment}-task-policy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Example permissions - adjust based on your application needs
              - Effect: Allow
                Action:
                  - 'ssm:GetParameters'
                  - 'ssm:GetParameter'
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Environment}/awse2e/*"
              # DynamoDB permissions
              - Effect: Allow
                Action:
                  - 'dynamodb:CreateTable'
                  - 'dynamodb:DescribeTable'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:DeleteItem'
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${Environment}-awse2e-messages"
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub "${Environment}-ecs-task-role"
        - Key: Application
          Value: "awse2e"
        - Key: ManagedBy
          Value: "CloudFormation"

  # ECS Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${Environment}-${TaskFamily}"
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: !Sub "${Environment}-${ContainerName}"
          Image: !Ref EcrRepositoryUri
          Essential: true
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              HostPort: !Ref ContainerPort
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroupName
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Environment:
            - Name: SERVER_ADDRESS
              Value: !Sub ":${ContainerPort}"
            - Name: CORS_ORIGINS
              Value: "*"  # Keeping as requested for public API access
            - Name: ENVIRONMENT
              Value: !Ref Environment
            # DynamoDB configuration
            - Name: USE_DYNAMODB
              Value: "true"
            - Name: DYNAMODB_TABLE_NAME
              Value: !Sub "${Environment}-awse2e-messages"
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub "${Environment}-${TaskFamily}"
        - Key: Application
          Value: "awse2e"
        - Key: ManagedBy
          Value: "CloudFormation"

Outputs:
  TaskDefinitionArn:
    Description: Task Definition ARN
    Value: !Ref TaskDefinition
    Export:
      Name: !Sub "${AWS::StackName}-TaskDefinitionArn"
