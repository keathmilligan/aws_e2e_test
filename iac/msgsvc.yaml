AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS Deployment - msgsvc ECS Stack (Updated for Shared ALB)'

Parameters:
  ApplicationName:
    Type: String
    Description: Name of the application

  Environment:
    Type: String
    Description: Environment name (dev, staging, prod)

  ServiceName:
    Type: String
    Default: msgsvc
    Description: Name of the service

  EcrRepositoryUri:
    Type: String
    Description: ECR Repository URI
    
  DeploymentTimestamp:
    Type: String
    Default: "0"
    Description: Timestamp for forcing new deployments

  ContainerCpu:
    Type: String
    Default: 256
    Description: CPU units for the container (e.g., 256, 512, 1024)

  ContainerMemory:
    Type: String
    Default: 512
    Description: Memory in MiB for the container (e.g., 512, 1024, 2048)

  ContainerPort:
    Type: Number
    Default: 8080
    Description: Container port

  LoggingKMSKeyArn:
    Type: String
    Description: ARN of the KMS key for encrypting logs
  
  TaskExecutionRoleArn:
    Type: String
    Description: ARN of the ECS Task Execution Role

  VpcId:
    Type: String
    Description: VPC ID

  ECSClusterName:
    Type: String
    Description: ECS Cluster Name

  PrivateSubnet1:
    Type: String
    Description: Private Subnet 1 ID

  PrivateSubnet2:
    Type: String
    Description: Private Subnet 2 ID
    
  HealthCheckPath:
    Type: String
    Default: /health
    Description: Health check path

  SharedALBSecurityGroupId:
    Type: String
    Description: Security Group ID of the shared ALB

  MessageServiceTargetGroupArn:
    Type: String
    Description: ARN of the Message Service Target Group from shared ALB

  CognitoRegion:
    Type: String
    Description: AWS region for Cognito (used to construct JWKS URL)

  UserPoolId:
    Type: String
    Description: ID of the Cognito User Pool (used to construct JWKS URL and issuer)

Resources:
  # CloudWatch Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${ApplicationName}-${Environment}-${ServiceName}"
      RetentionInDays: 30
      KmsKeyId: !Ref LoggingKMSKeyArn
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref ApplicationName
        - Key: Service
          Value: !Ref ServiceName
        - Key: ManagedBy
          Value: "CloudFormation"

  # DynamoDB Table for Messages
  MessagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${ApplicationName}-${Environment}-${ServiceName}-messages"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: MessageID
          AttributeType: S
        - AttributeName: UserID
          AttributeType: S
      KeySchema:
        - AttributeName: MessageID
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIDIndex
          KeySchema:
            - AttributeName: UserID
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref ApplicationName
        - Key: Service
          Value: !Ref ServiceName
        - Key: ManagedBy
          Value: "CloudFormation"

  # ECS Task Role - for application permissions
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      # Add only the permissions your application needs
      Policies:
        - PolicyName: !Sub "${ApplicationName}-${Environment}-${ServiceName}-task-policy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # DynamoDB permissions
              - Effect: Allow
                Action:
                  - 'dynamodb:CreateTable'
                  - 'dynamodb:DescribeTable'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:DeleteItem'
                Resource: 
                  - !GetAtt MessagesTable.Arn
                  - !Sub "${MessagesTable.Arn}/index/*"
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref ApplicationName
        - Key: Service
          Value: !Ref ServiceName
        - Key: ManagedBy
          Value: "CloudFormation"

  # ECS Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${ApplicationName}-${Environment}-${ServiceName}-task-family"
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      ExecutionRoleArn: !Ref TaskExecutionRoleArn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: !Sub "${ApplicationName}-${Environment}-${ServiceName}-container"
          Image: !Ref EcrRepositoryUri
          Essential: true
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              HostPort: !Ref ContainerPort
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Environment:
            - Name: SERVER_ADDRESS
              Value: !Sub ":${ContainerPort}"
            - Name: CORS_ORIGINS
              Value: "*"  # Keeping as requested for public API access
            - Name: ENVIRONMENT
              Value: !Ref Environment
            # DynamoDB configuration
            - Name: USE_DYNAMODB
              Value: "true"
            - Name: DYNAMODB_TABLE_NAME
              Value: !Sub "${ApplicationName}-${Environment}-${ServiceName}-messages"
            # JWT configuration
            - Name: JWKS_URL
              Value: !Sub "https://cognito-idp.${CognitoRegion}.amazonaws.com/${UserPoolId}/.well-known/jwks.json"
            - Name: JWT_ISSUER
              Value: !Sub "https://cognito-idp.${CognitoRegion}.amazonaws.com/${UserPoolId}"
            # Deployment timestamp to force task definition updates
            - Name: DEPLOYMENT_TIMESTAMP
              Value: !Ref DeploymentTimestamp
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref ApplicationName
        - Key: Service
          Value: !Ref ServiceName
        - Key: ManagedBy
          Value: "CloudFormation"

  # Security Group for ECS Tasks
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS tasks
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !Ref SharedALBSecurityGroupId
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref ApplicationName
        - Key: Service
          Value: !Ref ServiceName
        - Key: ManagedBy
          Value: "CloudFormation"

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Ref ServiceName
      Cluster: !Ref ECSClusterName
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 2
      LaunchType: FARGATE
      # Enable deployment circuit breaker for safer deployments
      DeploymentController:
        Type: ECS
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED  # Not needed when behind ALB
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroups:
            - !Ref ECSSecurityGroup
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
        # Enable deployment circuit breaker for safer deployments
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      LoadBalancers:
        - TargetGroupArn: !Ref MessageServiceTargetGroupArn
          ContainerName: !Sub "${ApplicationName}-${Environment}-${ServiceName}-container"
          ContainerPort: !Ref ContainerPort
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref ApplicationName
        - Key: Service
          Value: !Ref ServiceName
        - Key: ManagedBy
          Value: "CloudFormation"

Outputs:
  MessagesTableName:
    Description: Name of the DynamoDB table for messages
    Value: !Ref MessagesTable
    Export:
      Name: !Sub "${ApplicationName}-${Environment}-${ServiceName}-MessagesTableName"

  MessagesTableArn:
    Description: ARN of the DynamoDB table for messages
    Value: !GetAtt MessagesTable.Arn
    Export:
      Name: !Sub "${ApplicationName}-${Environment}-${ServiceName}-MessagesTableArn"

  ECSServiceArn:
    Description: ARN of the ECS Service
    Value: !Ref ECSService
    Export:
      Name: !Sub "${ApplicationName}-${Environment}-${ServiceName}-ECSServiceArn"