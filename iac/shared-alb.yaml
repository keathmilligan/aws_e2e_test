AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS Deployment - Shared Application Load Balancer for all services'

Parameters:
  ApplicationName:
    Type: String
    Description: Name of the application

  Environment:
    Type: String
    Description: Environment name (dev, staging, prod)

  VpcId:
    Type: String
    Description: VPC ID

  PublicSubnet1:
    Type: String
    Description: Public Subnet 1 ID

  PublicSubnet2:
    Type: String
    Description: Public Subnet 2 ID

  CertificateArn:
    Type: String
    Description: ARN of the ACM certificate for HTTPS

  DomainName:
    Type: String
    Description: Domain name for the ALB

  UserPoolId:
    Type: String
    Description: ID of the Cognito User Pool

Resources:
  # ALB Security Group
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for shared ALB
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: "Allow HTTP access from anywhere"
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: "Allow HTTPS access from anywhere"
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref ApplicationName
        - Key: ManagedBy
          Value: "CloudFormation"

  # Shared Application Load Balancer
  SharedApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${ApplicationName}-${Environment}-shared-alb"
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: 'true'
        - Key: deletion_protection.enabled
          Value: 'false'
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref ApplicationName
        - Key: ManagedBy
          Value: "CloudFormation"

  # Target Group for User Service
  UserServiceTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${ApplicationName}-${Environment}-usersvc-tg"
      VpcId: !Ref VpcId
      Port: 8081
      Protocol: HTTP
      TargetType: ip
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref ApplicationName
        - Key: Service
          Value: usersvc
        - Key: ManagedBy
          Value: "CloudFormation"

  # Target Group for Message Service
  MessageServiceTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${ApplicationName}-${Environment}-msgsvc-tg"
      VpcId: !Ref VpcId
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref ApplicationName
        - Key: Service
          Value: msgsvc
        - Key: ManagedBy
          Value: "CloudFormation"

  # HTTP Listener - redirects to HTTPS
  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref SharedApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: 443
            StatusCode: HTTP_301

  # HTTPS Listener with path-based routing
  HttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref SharedApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-2-2017-01
      Certificates:
        - CertificateArn: !Ref CertificateArn
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: 404
            ContentType: application/json
            MessageBody: '{"error": "Not Found"}'

  # Listener Rule for User Service (auth endpoints - no authentication required)
  AuthListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref HttpsListener
      Priority: 100
      Conditions:
        - Field: path-pattern
          Values:
            - "/auth*"
      Actions:
        - Type: forward
          TargetGroupArn: !Ref UserServiceTargetGroup

  # Listener Rule for User Service (users endpoints - authentication handled by service)
  UsersListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref HttpsListener
      Priority: 200
      Conditions:
        - Field: path-pattern
          Values:
            - "/users*"
      Actions:
        - Type: forward
          TargetGroupArn: !Ref UserServiceTargetGroup

  # Listener Rule for Message Service (authentication handled by service)
  MessagesListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref HttpsListener
      Priority: 300
      Conditions:
        - Field: path-pattern
          Values:
            - "/messages*"
      Actions:
        - Type: forward
          TargetGroupArn: !Ref MessageServiceTargetGroup

Outputs:
  SharedALBArn:
    Description: ARN of the shared Application Load Balancer
    Value: !Ref SharedApplicationLoadBalancer
    Export:
      Name: !Sub "${ApplicationName}-${Environment}-SharedALBArn"

  SharedALBDNSName:
    Description: DNS name of the shared Application Load Balancer
    Value: !GetAtt SharedApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub "${ApplicationName}-${Environment}-SharedALBDNSName"

  SharedALBURL:
    Description: URL of the shared Application Load Balancer
    Value: !Sub "https://${SharedApplicationLoadBalancer.DNSName}"
    Export:
      Name: !Sub "${ApplicationName}-${Environment}-SharedALBURL"

  SharedALBCustomDomainURL:
    Description: Custom domain URL of the shared Application Load Balancer
    Value: !Sub "https://${DomainName}"
    Export:
      Name: !Sub "${ApplicationName}-${Environment}-SharedALBCustomDomainURL"

  SharedALBSecurityGroupId:
    Description: Security Group ID for the shared ALB
    Value: !Ref ALBSecurityGroup
    Export:
      Name: !Sub "${ApplicationName}-${Environment}-SharedALBSecurityGroupId"

  UserServiceTargetGroupArn:
    Description: ARN of the User Service Target Group
    Value: !Ref UserServiceTargetGroup
    Export:
      Name: !Sub "${ApplicationName}-${Environment}-UserServiceTargetGroupArn"

  MessageServiceTargetGroupArn:
    Description: ARN of the Message Service Target Group
    Value: !Ref MessageServiceTargetGroup
    Export:
      Name: !Sub "${ApplicationName}-${Environment}-MessageServiceTargetGroupArn"

  SharedALBCanonicalHostedZoneID:
    Description: Canonical Hosted Zone ID of the shared ALB
    Value: !GetAtt SharedApplicationLoadBalancer.CanonicalHostedZoneID
    Export:
      Name: !Sub "${ApplicationName}-${Environment}-SharedALBCanonicalHostedZoneID"